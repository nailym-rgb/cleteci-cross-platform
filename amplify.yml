version: 1
frontend:
  phases:
    # 1. Fase de Provisionamiento: Configura el entorno
    preBuild:
      commands:
        # Clona el SDK de Flutter
        - git clone https://github.com/flutter/flutter.git -b stable $HOME/flutter
        # Añade Flutter a la PATH
        - export PATH="$PATH:$HOME/flutter/bin"
        - mkdir -p assets # Asegura que la carpeta assets exista
        # Crea el archivo .env con las variables de Amplify
        - echo "FIREBASE_API_KEY=$FIREBASE_API_KEY" > assets/env.vars
        - echo "FIREBASE_APP_ID=$FIREBASE_APP_ID" >> assets/env.vars
        - echo "GOOGLE_OAUTH_CLIENT_ID=$GOOGLE_OAUTH_CLIENT_ID" >> assets/env.vars
        # Verifica la instalación de Flutter
        - flutter doctor
        # Habilita el soporte para web
        - flutter config --enable-web
        # Instalar Chrome para pruebas de integración (requerido por Flutter)
        - wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | rpm --import -
        - wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
        - yum install -y ./google-chrome-stable_current_x86_64.rpm
        - rm google-chrome-stable_current_x86_64.rpm
    # 2. Fase de Compilación: Compila el proyecto
    build:
      commands:
        # Asegura que Flutter esté en la PATH
        - export PATH="$PATH:$HOME/flutter/bin"
        # Obtiene las dependencias de pubspec.yaml
        - flutter pub get
        # Compila la aplicación web para producción
        - flutter build web --release --pwa-strategy none
    # 3. Fase de Pruebas de Integración: Ejecuta pruebas antes de desplegar
    test:
       commands:
         # Ejecutar pruebas de integración de Flutter
         - flutter test integration_test/
  # 4. Artefactos: Indica qué archivos subir al hosting
  artifacts:
    # El directorio donde 'flutter build web' guarda el resultado
    baseDirectory: build/web
    files:
      - '**/*'
  cache:
    paths:
      - $HOME/flutter
      - node_modules