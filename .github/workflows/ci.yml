name: CI

on:
  push:
    branches: [ main, master, develop, features ]
  pull_request:
    branches: [ main, master, develop, features ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - uses: subosito/flutter-action@v2
    - run: flutter pub get
    - run: echo "${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}" > .env
    - run: flutter test --coverage
    - run: flutter build web
    - name: Setup LCOV
      uses: hrishikesh-kadam/setup-lcov@v1
    # - name: Report Code Coverage
    #   uses: zgosalvez/github-actions-report-lcov@v3
    #   with:
    #     coverage-files: coverage/lcov.info
    #     minimum-coverage: 80
    #     artifact-name: code-coverage-report
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false
    - name: Check 80% Coverage Minimum (Alternativa)
      run: |
        coverage_percent=$(awk '/^overall coverage:/ {print $3}' coverage/lcov.info | sed 's/[^0-9.]//g')
        if (( $(echo "$coverage_percent < 80.0" | bc -l) )); then
          echo "❌ ERROR: La cobertura de código es del $coverage_percent%, y se requiere un 80%."
          exit 1
        else
          echo "✅ Cobertura OK: $coverage_percent%"
        fi
      shell: bash # Asegúrate de usar bash
  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v4
    - name: Build Docker image
      run: docker build -t cleteci-cross-platform .
    # Uncomment the following steps to push to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push to Docker Hub
      run: |
        docker tag cleteci-cross-platform ${{ secrets.DOCKER_USERNAME }}/cleteci-cross-platform:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/cleteci-cross-platform:latest
  smoke_test:
    name: Ejecutar Smoke Test en URL Pública
    runs-on: ubuntu-latest
    
    needs: [build-docker] 
    
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'

    steps:
      - name: Configurar URL de Despliegue
        run: |
          if [ "${{ github.ref_name }}" == "develop" ]; then
            echo "WEB_APP_URL=https://poc-staging.cleteci.com/" >> $GITHUB_ENV
          else
            echo "WEB_APP_URL=https://poc-staging.cleteci.com/" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Esperar Propagación y Verificar 200 OK
        run: |
          DEPLOY_URL="${{ env.WEB_APP_URL }}"
          echo "Iniciando Smoke Test en: $DEPLOY_URL"

          sleep 45s

          MAX_RETRIES=5
          SLEEP_TIME=10
          
          for i in $(seq 1 $MAX_RETRIES); do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -L $DEPLOY_URL)

            if [ "$HTTP_CODE" -eq 200 ]; then
              echo "✅ Smoke Test APROBADO (Intento $i): La aplicación está en línea (200 OK)."
              exit 0
            fi

            echo "⏳ Intento $i fallido (Código: $HTTP_CODE). Esperando $SLEEP_TIME segundos..."
            sleep $SLEEP_TIME
          done

          echo "❌ Smoke Test FALLIDO: No se recibió código 200 después de $MAX_RETRIES intentos."
          exit 1
